name: Sync SEO to Knowledge Base

on:
  push:
    branches:
      - main
    paths:
      - 'Knowledge/SEO/**/*.md'
  workflow_dispatch:

jobs:
  sync-docs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install pandoc
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc
          
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: 'Knowledge/SEO/**/*.md'

      - name: Sync to Knowledge Base
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          WP_USERNAME: ${{ secrets.WP_USERNAME }}
          WP_APP_PASSWORD: ${{ secrets.WP_APP_PASSWORD }}
          BEARER_TOKEN: ${{ secrets.AIENGINE_BEARER_TOKEN }}
          WP_URL: ${{ secrets.WP_SITE_URL }}
          DEFAULT_TOPIC_ID: ${{ secrets.KNOWLEDGE_SEO_TOPIC_ID }}
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          IFS=' ' read -r -a files <<< "$CHANGED_FILES"
          
          for file in "${files[@]}"; do
            [ -z "$file" ] && continue
            
            echo "Processing: $file"
            
            # Determine topic based on subfolder
            TOPIC_ID=$DEFAULT_TOPIC_ID
            case "$file" in
              *"/0_fundamentals/"*) TOPIC_ID=1162 ;;
              *"/fundamentals/"*) TOPIC_ID=1162 ;;
              *"/1_research-and-strategy/"*) TOPIC_ID=1163 ;;
              *"/research-and-strategy/"*) TOPIC_ID=1163 ;;
              *"/2_content-and-on-page/"*) TOPIC_ID=1164 ;;
              *"/content-and-on-page/"*) TOPIC_ID=1164 ;;
              *"/3_technical-seo/"*) TOPIC_ID=1165 ;;
              *"/technical-seo/"*) TOPIC_ID=1165 ;;
              *"/4_ai-and-automation/"*) TOPIC_ID=1166 ;;
              *"/ai-and-automation/"*) TOPIC_ID=1166 ;;
              *"/5_measurement-and-optimization/"*) TOPIC_ID=1167 ;;
              *"/measurement-and-optimization/"*) TOPIC_ID=1167 ;;
              *"/6_future-trends/"*) TOPIC_ID=1168 ;;
              *"/future-trends/"*) TOPIC_ID=1168 ;;
            esac
            
            echo "Assigned to topic ID: $TOPIC_ID"
            
            # Handle filenames with spaces
            filename=$(basename "${file}" .md)
            title=$(echo "$filename" | sed 's/-/ /g' | sed 's/\b\(.\)/\u\1/g')
            
            # Check if file exists
            if [ ! -f "${file}" ]; then
              echo "⚠ File not found: ${file}"
              continue
            fi
            
            content=$(cat "${file}")
            
            # Extract front matter if exists
            excerpt=""
            tags=""
            if grep -q "^---$" "${file}"; then
              front_matter=$(sed -n '/^---$/,/^---$/p' "${file}" | sed '1d;$d')
              
              # Extract title
              fm_title=$(echo "$front_matter" | grep -i "^title:" | sed 's/^title: *//I' | sed 's/^["'\'']\(.*\)["'\'']$/\1/')
              if [ ! -z "$fm_title" ]; then
                title="$fm_title"
              fi
              
              # Extract excerpt
              excerpt=$(echo "$front_matter" | grep -i "^excerpt:" | sed 's/^excerpt: *//I' | sed 's/^["'\'']\(.*\)["'\'']$/\1/')
              
              # Extract tags (comma-separated or YAML array)
              tags=$(echo "$front_matter" | grep -i "^tags:" | sed 's/^tags: *//I' | sed 's/[\[\]]//g' | sed 's/,/ /g')
              
              # Optional: Allow frontmatter to override topic
              fm_topic=$(echo "$front_matter" | grep -i "^topic:" | sed 's/^topic: *//I')
              if [ ! -z "$fm_topic" ]; then
                TOPIC_ID=$fm_topic
                echo "Topic overridden by frontmatter: $TOPIC_ID"
              fi
              
              # Remove front matter from content
              content=$(sed '1{/^---$/!q;};1,/^---$/d' "${file}")
            fi
            
            # Strip Obsidian internal links (keep just text)
            content=$(echo "$content" | sed 's/\[\[[^]|]*|\([^]]*\)\]\]/\1/g')
            content=$(echo "$content" | sed 's/\[\[\([^]]*\)\]\]/\1/g')
            
            # Remove Obsidian image embeds
            content=$(echo "$content" | sed 's/!\[\[\([^]]*\)\]\]//g')
            
            # Strip Dataview code blocks
            content=$(echo "$content" | sed '/^```dataview$/,/^```$/d')
            
            # Save content to temp file and convert with pandoc
            echo "$content" > /tmp/content.md
            
            if ! html_content=$(pandoc \
              -f markdown+smart \
              -t html \
              --wrap=none \
              /tmp/content.md 2>&1); then
              echo "⚠ Pandoc conversion failed for $file"
              echo "Error: $html_content"
              continue
            fi
            
            echo "Content length: ${#content} chars"
            echo "HTML length: ${#html_content} chars"
            
            # Skip if HTML is empty
            if [ -z "$html_content" ]; then
              echo "⚠ HTML content is empty, skipping"
              continue
            fi
            
            # Add table borders with inline styles
            html_content=$(echo "$html_content" | sed 's/<table>/<table style="border-collapse:collapse;width:100%;border:1px solid #ddd;">/g')
            html_content=$(echo "$html_content" | sed 's/<th\([^>]*\)>/<th\1 style="border:1px solid #ddd;padding:8px;background:#f4f4f4;text-align:left;">/g')
            html_content=$(echo "$html_content" | sed 's/<td\([^>]*\)>/<td\1 style="border:1px solid #ddd;padding:8px;text-align:left;">/g')
            
            auth_header=$(echo -n "$WP_USERNAME:$WP_APP_PASSWORD" | base64)
            
            # Build tags array if exists
            if [ ! -z "$tags" ]; then
              tags_array=$(echo "$tags" | jq -R 'split(" ") | map(select(length > 0))')
            else
              tags_array="[]"
            fi
            
            # Build JSON payload with correct plural field names
            if [ ! -z "$excerpt" ]; then
              json_payload=$(jq -n \
                --arg title "$title" \
                --arg content "$html_content" \
                --arg excerpt "$excerpt" \
                --argjson topic "$TOPIC_ID" \
                --argjson tags "$tags_array" \
                '{
                  title: $title,
                  content: $content,
                  excerpt: $excerpt,
                  status: "publish",
                  knowledge_topics: [$topic],
                  knowledge_tags: $tags
                }')
            else
              json_payload=$(jq -n \
                --arg title "$title" \
                --arg content "$html_content" \
                --argjson topic "$TOPIC_ID" \
                --argjson tags "$tags_array" \
                '{
                  title: $title,
                  content: $content,
                  status: "publish",
                  knowledge_topics: [$topic],
                  knowledge_tags: $tags
                }')
            fi
            
            echo "Creating/updating post: $title"
            
            response=$(curl -s -w "\n%{http_code}" \
              -X POST \
              -H "Authorization: Basic $auth_header" \
              -H "Content-Type: application/json" \
              -d "$json_payload" \
              "$WP_URL/wp-json/wp/v2/knowledge")
            
            http_code=$(echo "$response" | tail -n1)
            body=$(echo "$response" | sed '$d')
            
            if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
              echo "✓ Successfully synced: $title"
              post_id=$(echo "$body" | jq -r '.id')
              echo "Post ID: $post_id"
              
              # Generate embeddings
              echo "Generating embeddings..."
              embed_payload=$(jq -n --argjson post_id "$post_id" '{postId: $post_id, envId: "default"}')
              
              embed_response=$(curl -s -w "\n%{http_code}" \
                -X POST \
                -H "Authorization: Bearer $BEARER_TOKEN" \
                -H "Content-Type: application/json" \
                -d "$embed_payload" \
                "$WP_URL/wp-json/mwai/v1/vectors/add")
              
              embed_http_code=$(echo "$embed_response" | tail -n1)
              
              if [ "$embed_http_code" -eq 200 ]; then
                echo "✓ Embeddings generated and stored in Pinecone"
              else
                echo "⚠ Embedding generation failed (HTTP $embed_http_code)"
                echo "$embed_response"
              fi
            else
              echo "✗ Failed to sync: $title (HTTP $http_code)"
              echo "$body"
            fi
            
            echo "---"
          done
          
      - name: Summary
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "SEO sync completed"
