name: Sync to BetterDocs

on:
  push:
    branches:
      - main
    paths:
      - 'SEO/**/*.md'

jobs:
  sync-docs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: 'SEO/**/*.md'

      - name: Sync to BetterDocs with AI Engine
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          BEARER_TOKEN: ${{ secrets.AIENGINE_BEARER_TOKEN }}
          WP_URL: ${{ secrets.WP_SITE_URL }}
          CATEGORY_ID: ${{ secrets.BETTERDOCS_SEO_CATEGORY_ID }}
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "Processing: $file"
            
            # Extract filename without extension for title
            filename=$(basename "$file" .md)
            title=$(echo "$filename" | sed 's/-/ /g' | sed 's/\b\(.\)/\u\1/g')
            
            # Read markdown content
            content=$(cat "$file")
            
            # Extract front matter if exists (title, excerpt, etc.)
            if grep -q "^---$" "$file"; then
              # Has front matter
              front_matter=$(sed -n '/^---$/,/^---$/p' "$file" | sed '1d;$d')
              
              # Try to extract title from front matter
              fm_title=$(echo "$front_matter" | grep -i "^title:" | sed 's/^title: *//I' | sed 's/^["'\'']\(.*\)["'\'']$/\1/')
              if [ ! -z "$fm_title" ]; then
                title="$fm_title"
              fi
              
              # Remove front matter from content
              content=$(sed '1{/^---$/!q;};1,/^---$/d' "$file")
            fi
            
            # Prepare JSON payload for AI Engine
            json_payload=$(jq -n \
              --arg title "$title" \
              --arg content "$content" \
              --arg category "$CATEGORY_ID" \
              '{
                post_type: "docs",
                post_title: $title,
                post_content: $content,
                post_status: "publish",
                tax_input: {
                  doc_category: [$category]
                }
              }')
            
            echo "Creating/updating post: $title"
            
            # Call AI Engine API to create post
            response=$(curl -s -w "\n%{http_code}" \
              -X POST \
              -H "Authorization: Bearer $BEARER_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$json_payload" \
              "$WP_URL/wp-json/mwai/v1/helpers/create_post")
            
            http_code=$(echo "$response" | tail -n1)
            body=$(echo "$response" | sed '$d')
            
            if [ "$http_code" -eq 200 ]; then
              echo "✓ Successfully synced: $title"
              echo "$body"
              
              # Extract post ID from response
              post_id=$(echo "$body" | jq -r '.post_id // .id // empty')
              
              if [ ! -z "$post_id" ]; then
                echo "Post ID: $post_id"
                
                # Optionally: Trigger embedding generation
                echo "Generating embeddings for post $post_id..."
                
                embed_response=$(curl -s -w "\n%{http_code}" \
                  -X POST \
                  -H "Authorization: Bearer $BEARER_TOKEN" \
                  -H "Content-Type: application/json" \
                  -d "{\"postId\": $post_id, \"envId\": \"default\"}" \
                  "$WP_URL/wp-json/mwai/v1/vectors/add")
                
                embed_http_code=$(echo "$embed_response" | tail -n1)
                
                if [ "$embed_http_code" -eq 200 ]; then
                  echo "✓ Embeddings generated successfully"
                else
                  echo "⚠ Embedding generation failed or not configured"
                fi
              fi
            else
              echo "✗ Failed to sync: $title (HTTP $http_code)"
              echo "$body"
            fi
            
            echo "---"
          done

      - name: Summary
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Sync completed!"
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
